---
name: CI

"on":
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  SQLITE_DB_PATH: ${{ secrets.SQLITE_DB_PATH }}
  SSL_CERT: ${{ secrets.SSL_CERT }}
  SSL_KEY: ${{ secrets.SSL_KEY }}

jobs:
  check-secrets:
    runs-on: ubuntu-24.04
    steps:
      - name: Verify required secrets
        run: |
          missing=()
          for s in DB_USER DB_PASSWORD SQLITE_DB_PATH SSL_CERT SSL_KEY; do
            if [ -z "${!s}" ]; then
              missing+=("$s")
            fi
          done
          if [ ${#missing[@]} -ne 0 ]; then
            echo "Missing required secrets: ${missing[*]}" >&2
            exit 1
          fi
  test:
    name: Build and test
    needs: check-secrets
    strategy:
      matrix:
        include:
          - os: debian-12
            arch: x64
          - os: ubuntu-22.04
            arch: x64
          - os: ubuntu-24.04
            arch: x64
          - os: macos-14
            arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies (Debian/Ubuntu)
        if: contains('debian-12 ubuntu-22.04 ubuntu-24.04', matrix.os)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            autoconf automake libtool pkg-config \
            libxml2-dev libcurl4-openssl-dev \
            libmysqlclient-dev libpq-dev libmicrohttpd-dev
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-14'
        run: |
          brew update
          brew install \
            autoconf automake libtool pkg-config \
            libxml2 curl mysql-client libpq libmicrohttpd
          echo "PKG_CONFIG_PATH=/opt/homebrew/opt/libpq/lib/pkgconfig:\
          /opt/homebrew/opt/mysql-client/lib/pkgconfig:\
          /opt/homebrew/opt/libxml2/lib/pkgconfig:$PKG_CONFIG_PATH" >> \
            $GITHUB_ENV
      - name: Generate configure script
        run: |
          set -o pipefail
          ./autogen.sh 2>&1 | tee autogen.log
      - name: Configure
        run: |
          set -o pipefail
          ./configure 2>&1 | tee configure.log
      - name: Build
        run: |
          set -o pipefail
          make 2>&1 | tee build.log
      - name: Run unit tests
        run: |
          set -o pipefail
          make check 2>&1 | tee test.log
      - name: Upload build artifacts and logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-logs
          path: |
            autogen.log
            configure.log
            build.log
            test.log
            config.log
            tests/test-suite.log
            src/scastd
            src/.libs/scastd
          if-no-files-found: ignore

  lint:
    needs: check-secrets
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Install cppcheck
        run: sudo apt-get update && sudo apt-get install -y cppcheck
      - name: Run cppcheck
        run: |
          cppcheck --enable=all --std=c++17 \
            --suppress=missingIncludeSystem \
            src tests
  release:
    needs: [test, lint]
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Create GitHub release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
