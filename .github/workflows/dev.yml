---
name: DEV

"on":
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

jobs:
  test:
    name: Build and test
    strategy:
      matrix:
        include:
          - os: debian-12
            arch: x64
          - os: debian-13
            arch: x64
          - os: ubuntu-24.04
            arch: x64
          - os: macos-14
            arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies (Debian/Ubuntu)
        if: contains('debian-12 debian-13 ubuntu-24.04', matrix.os)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            autoconf automake libtool pkg-config \
            gettext \
            autopoint \
            libxml2-dev libcurl4-openssl-dev \
            libmysqlclient-dev mariadb-client libpq-dev libmicrohttpd-dev
          wget https://ftp.gnu.org/pub/gnu/gettext/gettext-0.22.tar.gz
          tar -xf gettext-0.22.tar.gz
          cd gettext-0.22
          ./configure --disable-shared
          make -j$(nproc)
          sudo make install
          cd ..
          echo "PATH=/usr/local/bin:$PATH" >> $GITHUB_ENV
          MYSQL_CFLAGS=$(mysql_config --cflags)
          MYSQL_LIBS=$(mysql_config --libs)
          export CPPFLAGS="$MYSQL_CFLAGS $CPPFLAGS"
          export LDFLAGS="$MYSQL_LIBS $LDFLAGS"
          PCP=/usr/lib/x86_64-linux-gnu/pkgconfig
          export PKG_CONFIG_PATH="$PCP:$PKG_CONFIG_PATH"
          echo "CPPFLAGS=$CPPFLAGS" >> $GITHUB_ENV
          echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-14'
        run: |
          brew update
          brew install \
            autoconf automake libtool pkg-config gettext \
            libxml2 curl mysql-client libpq libmicrohttpd
          B=/opt/homebrew/opt
          export PKG_CONFIG_PATH=$B/libxml2/lib/pkgconfig:$PKG_CONFIG_PATH
          export PKG_CONFIG_PATH=$B/mysql-client/lib/pkgconfig:$PKG_CONFIG_PATH
          export PKG_CONFIG_PATH=$B/libpq/lib/pkgconfig:$PKG_CONFIG_PATH
          export PATH=$B/mysql-client/bin:$PATH
          export PATH=$B/gettext/bin:$PATH
          export CPPFLAGS=-I$B/mysql-client/include $CPPFLAGS
          export LDFLAGS=-L$B/mysql-client/lib $LDFLAGS
          MYSQL_VER=mysql-connector-c++-9.4.0-macos15-arm64
          MYSQL_URL=https://dev.mysql.com/get/Downloads/Connector-C++/$MYSQL_VER.tar.gz
          curl -LO "$MYSQL_URL"
          tar -xf "$MYSQL_VER.tar.gz"
          CONN_DIR="${PWD}/$MYSQL_VER"
          export PATH="$CONN_DIR/bin:$PATH"
          export CPPFLAGS="-I$CONN_DIR/include $CPPFLAGS"
          export LDFLAGS="-L$CONN_DIR/lib $LDFLAGS"
          export PKG_CONFIG_PATH="$CONN_DIR/lib/pkgconfig:$PKG_CONFIG_PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "CPPFLAGS=$CPPFLAGS" >> $GITHUB_ENV
          echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "PATH=$PATH"
          echo "CPPFLAGS=$CPPFLAGS"
          echo "LDFLAGS=$LDFLAGS"
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
      - name: Verify autopoint
        run: autopoint --version
      - name: Run autogen script
        run: |
          set -o pipefail
          ./autogen.sh 2>&1 | tee autogen.log
      - name: Configure
        run: |
          set -o pipefail
          ./configure 2>&1 | tee configure.log
      - name: Build
        run: |
          set -o pipefail
          make 2>&1 | tee build.log
      - name: Verify scastd --help
        run: |
          set -o pipefail
          ./src/scastd --help 2>&1 | tee scastd-help.log
      - name: Upload build artifacts and logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-logs
          path: |
            autogen.log
            configure.log
            build.log
            scastd-help.log
            config.log
            src/scastd
            src/.libs/scastd
          if-no-files-found: ignore

  lint:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Install cppcheck
        run: sudo apt-get update && sudo apt-get install -y cppcheck
      - name: Run cppcheck
        run: |
          cppcheck --enable=all --std=c++17 \
            --suppress=missingIncludeSystem \
            src
  release:
    needs: [test, lint]
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    steps:
      - name: Create GitHub release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: true
