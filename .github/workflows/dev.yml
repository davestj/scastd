---
name: DEV

"on":
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

jobs:
  test:
    name: Build and test
    strategy:
      matrix:
        include:
          - os: debian-12
            arch: x64
          - os: debian-13
            arch: x64
          - os: ubuntu-24.04
            arch: x64
          - os: macos-14
            arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies (Debian/Ubuntu)
        if: contains('debian-12 debian-13 ubuntu-24.04', matrix.os)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            autoconf automake libtool pkg-config gettext autopoint \
            libxml2-dev libcurl4-openssl-dev \
            libmysqlclient-dev libpq-dev libmicrohttpd-dev
          wget https://ftp.gnu.org/pub/gnu/gettext/gettext-0.22.tar.gz
          tar -xf gettext-0.22.tar.gz
          cd gettext-0.22
          ./configure --disable-shared
          make -j$(nproc)
          sudo make install
          cd ..
          echo "PATH=/usr/local/bin:$PATH" >> $GITHUB_ENV
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-14'
        run: |
          brew update
          brew install \
            autoconf automake libtool pkg-config gettext \
            libxml2 curl mysql-client libpq libmicrohttpd
          echo "PKG_CONFIG_PATH=/opt/homebrew/opt/libpq/lib/pkgconfig:\
          /opt/homebrew/opt/mysql-client/lib/pkgconfig:\
          /opt/homebrew/opt/libxml2/lib/pkgconfig:$PKG_CONFIG_PATH" >> \
            $GITHUB_ENV
          echo "PATH=/opt/homebrew/opt/gettext/bin:$PATH" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/opt/homebrew/opt/mysql-client/include $CPPFLAGS" >> $GITHUB_ENV
          echo "LDFLAGS=-L/opt/homebrew/opt/mysql-client/lib $LDFLAGS" >> $GITHUB_ENV
          echo "PATH=/opt/homebrew/opt/mysql-client/bin:$PATH" >> $GITHUB_ENV
          curl -LO https://dev.mysql.com/get/Downloads/Connector-C++/mysql-connector-c++-9.4.0-macos15-arm64.tar.gz
          tar -xf mysql-connector-c++-9.4.0-macos15-arm64.tar.gz
          echo "CPPFLAGS=-I$PWD/mysql-connector-c++-9.4.0-macos15-arm64/include $CPPFLAGS" >> $GITHUB_ENV
          echo "LDFLAGS=-L$PWD/mysql-connector-c++-9.4.0-macos15-arm64/lib $LDFLAGS" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$PWD/mysql-connector-c++-9.4.0-macos15-arm64/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
      - name: Generate configure script
        run: |
          set -o pipefail
          autopoint --version
          ./autogen.sh 2>&1 | tee autogen.log
      - name: Configure
        run: |
          set -o pipefail
          ./configure 2>&1 | tee configure.log
      - name: Build
        run: |
          set -o pipefail
          make 2>&1 | tee build.log
      - name: Run unit tests
        run: |
          set -o pipefail
          make check 2>&1 | tee test.log
      - name: Upload build artifacts and logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-logs
          path: |
            autogen.log
            configure.log
            build.log
            test.log
            config.log
            tests/test-suite.log
            src/scastd
            src/.libs/scastd
          if-no-files-found: ignore

  lint:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Install cppcheck
        run: sudo apt-get update && sudo apt-get install -y cppcheck
      - name: Run cppcheck
        run: |
          cppcheck --enable=all --std=c++17 \
            --suppress=missingIncludeSystem \
            src tests
  release:
    needs: [test, lint]
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    steps:
      - name: Create GitHub release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: true
